<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>how to set up a blog</title>
      <link href="/2019/10/12/how-to-set-up-a-blog/"/>
      <url>/2019/10/12/how-to-set-up-a-blog/</url>
      
        <content type="html"><![CDATA[<h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><p><font size="1">哈哈哈哈哈哈哈哈，继我工作3年后，终于搭建了博客了。(虽然迟到了这么久…但还是哈哈哈哈哈哈好开心啊)</font></p><h3 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h3><p>Github Pages + Travis + Hexo</p><h3 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h3><p>Hexo呢，是基于Node.js的静态博客框架。反正就是，可以减小那些别的操作，让写博客的人更专注于写博客内容。 </p><h5 id="安装和使用"><a href="#安装和使用" class="headerlink" title="安装和使用"></a>安装和使用</h5><p>前提条件，已安装git、nodejs。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>安装完hexo-cli工具后，就可以使用hexo命令进行操作了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init [dir]</span><br></pre></td></tr></table></figure><p>初始化博客。</p><p>完成之后，会产生几个文件夹，如下。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds   //模板，用于创建博文等</span><br><span class="line">├── source   //博文等具体位置</span><br><span class="line">└── themes  //主题</span><br></pre></td></tr></table></figure><p>关于hexo的操作命令如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">hexo --help</span><br><span class="line">Usage: hexo &lt;command&gt;</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  clean     Remove generated files and cache.</span><br><span class="line">  config    Get or set configurations.</span><br><span class="line">  deploy    Deploy your website.</span><br><span class="line">  generate  Generate static files.</span><br><span class="line">  help      Get help on a command.</span><br><span class="line">  init      Create a new Hexo folder.</span><br><span class="line">  list      List the information of the site</span><br><span class="line">  migrate   Migrate your site from other system to Hexo.</span><br><span class="line">  new       Create a new post.</span><br><span class="line">  publish   Moves a draft post from _drafts to _posts folder.</span><br><span class="line">  render    Render files with renderer plugins.</span><br><span class="line">  server    Start the server.</span><br></pre></td></tr></table></figure><p>使用generate可产生静态文件夹<code>public</code>，使用server命令即可在本地启动node服务，使用浏览器即可查看到效果。</p><p>如果 hexo没有server的话，是因为版本的不同，将server独立出去了，需要单独安装<code>npm install hexo-server --save</code></p><p>关于主题的话，如果选择开源主题，可直接下载到theme文件夹即可使用。我这里使用的是<a href="https://github.com/probberechts/hexo-theme-cactus">cactus</a></p><h3 id="Github-Pages"><a href="#Github-Pages" class="headerlink" title="Github Pages"></a>Github Pages</h3><blockquote><p><a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> is designed to host your personal, organization, or project pages from a GitHub repository.</p><p> Your site is published at <a href="https://xiaoxuez.github.io/" target="_blank" rel="noopener">https://xiaoxuez.github.io/</a></p></blockquote><p>就是github提供的服务，将github仓库部署到<a href="https://username.github.io这样的域名下。" target="_blank" rel="noopener">https://username.github.io这样的域名下。</a></p><p><font size="2">这样就不用自己买服务器，自己部署服务了。</font></p><p>使用方式呢，就是创建一个仓库，然后从仓库setting页，即可看到Github Pages设置项，可选择要部署的分支和选择主题。这里要选择一个主题。然后如果使用username.github.io命名的仓库的话，只能部署master分支，不能修改。</p><h3 id="Travis"><a href="#Travis" class="headerlink" title="Travis"></a>Travis</h3><p><a href="[https://travis-ci.com](https://travis-ci.com/)">travis</a>自动化部署</p><p>首先要理解的是，博客，其实是有两套代码的，一套是源代码，一套是生成的<code>public</code>。我们可以选择将源代码放到一个分支上，<code>public</code>提交到另一个分支上。然后Github Pages部署的分支选择<code>public</code>所在的分支即可。</p><p>那么，travis可以帮助的事呢，就是当我将源代码push到远程仓库后，做一些事，比如执行<code>hexo generate</code>脚本生成<code>public</code>文件夹并push到对应分支上。这样就很完美了。</p><p>关于travis的具体使用，可见<a href="https://docs.travis-ci.com/" target="_blank" rel="noopener">详细文档</a></p><p>首先，要添加<code>.travis.yaml</code>配置文件到仓库代码里。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sudo: false</span><br><span class="line">language: node_js</span><br><span class="line">node_js:</span><br><span class="line">  - 10 # use nodejs v10 LTS</span><br><span class="line">cache: npm</span><br><span class="line">branches:</span><br><span class="line">  only:</span><br><span class="line">    - resource # build master branch only</span><br><span class="line">script:</span><br><span class="line">  - hexo generate # generate static files</span><br><span class="line">deploy:</span><br><span class="line">  provider: pages</span><br><span class="line">  skip-cleanup: true</span><br><span class="line">  github-token: $GH_TOKEN</span><br><span class="line">  keep-history: true</span><br><span class="line">  on:</span><br><span class="line">    branch: resource  //构建resource分支</span><br><span class="line">  local-dir: public</span><br><span class="line">  target_branch: master  //发布到master分支</span><br></pre></td></tr></table></figure><p>target_branch默认呢是<code>gh-pages</code>。然后因为我的仓库名为<code>xiaoxuez.github.io</code>，上文提到了我需要将静态文件提交到master分支，所以我将<code>hexo generate</code>之后的<code>public</code>文件夹发布到mster分支上了。关于deploy各字段的介绍，可见<a href="https://docs.travis-ci.com/user/deployment/pages/" target="_blank" rel="noopener">文档</a></p><p>最后，就是要github授权给travis，文档在<a href="https://help.github.com/en/articles/creating-a-personal-access-token-for-the-command-line" target="_blank" rel="noopener">这里</a>。Token的存放可以选择在本地，或者配置到<a href="https://docs.travis-ci.com/user/environment-variables#defining-variables-in-repository-settings" target="_blank" rel="noopener">travis</a>上。</p><p>这样，就可以使用啦。</p><p>还有就是在github上的personal settings里的Applicaitons会安装travis插件，可以控制travis的权限。</p>]]></content>
      
      
      <categories>
          
          <category> enjoyment </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
